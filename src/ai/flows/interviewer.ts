
'use server';

/**
 * @fileOverview An AI flow that acts as an interviewer, extracting structured profile data from a user's free-form text.
 *
 * - interview - A function that processes the user's text and returns a structured profile.
 * - InterviewInput - The input type for the interview function.
 * - InterviewOutput - The return type for the interview function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define Zod schemas for nested structures
const WorkExperienceSchema = z.object({
  title: z.string().describe('The job title.'),
  company: z.string().describe('The name of the company.'),
  startDate: z.string().describe('The start date of the employment.'),
  endDate: z.string().describe('The end date of the employment (or "Present").'),
  description: z.string().describe('A brief description of the role and responsibilities.'),
});

const EducationSchema = z.object({
  school: z.string().describe('The name of the school or university.'),
  degree: z.string().describe('The degree obtained (e.g., Doctor of Optometry).'),
  fieldOfStudy: z.string().describe('The field of study (e.g., Optometry).'),
  startYear: z.string().describe('The start year of the education.'),
  endYear: z.string().describe('The end year of the education.'),
});

const LinksSchema = z.object({
    email: z.string().email().optional().describe("The user's email address."),
    linkedin: z.string().url().optional().describe("A URL to the user's LinkedIn profile or personal website."),
});


// Define the main input and output schemas for the flow
const InterviewInputSchema = z.object({
  text: z.string().describe("The user's free-form text describing themselves and their professional background."),
});
export type InterviewInput = z.infer<typeof InterviewInputSchema>;

export const InterviewOutputSchema = z.object({
    id: z.string().describe("A unique ID for the user, can be a timestamp."),
    name: z.string().describe('The full name of the person or organization.'),
    type: z.enum(['Student', 'Optometrist', 'Ophthalmologist', 'Optician', 'Academic', 'Researcher', 'Association', 'College', 'Hospital', 'Optical', 'Industry']).describe('The professional role or type of organization.'),
    experience: z.string().describe('A concise headline or tagline summarizing their experience (e.g., "5+ years in pediatric optometry" or "Leading eye care association").'),
    location: z.string().describe('The city, state, and/or country of the user.'),
    skills: z.array(z.string()).describe('A list of key professional skills, focus areas, or services offered.'),
    interests: z.array(z.string()).describe('A list of professional interests, specialities, or keywords.'),
    bio: z.string().describe('A professionally written bio, 3-4 sentences long, in the first person for individuals. This should be generated by the AI based on the input text, not just copied.'),
    links: LinksSchema.describe("The user's contact links."),
    avatarUrl: z.string().url().default('https://i.ibb.co/jG6L8p3/default-avatar.png').describe("A placeholder avatar URL. Always use 'https://i.ibb.co/jG6L8p3/default-avatar.png' as the default."),
    workExperience: z.array(WorkExperienceSchema).optional().describe('A list of the user\'s previous work experiences.'),
    education: z.array(EducationSchema).optional().describe('A list of the user\'s educational background.'),
    languages: z.array(z.string()).optional().describe('A list of languages the user speaks.'),
    verified: z.boolean().default(false).describe("Set to false by default."),
});
export type InterviewOutput = z.infer<typeof InterviewOutputSchema>;

// The main function that will be called from the frontend
export async function interview(input: InterviewInput): Promise<InterviewOutput> {
  return interviewerFlow(input);
}

const prompt = ai.definePrompt({
  name: 'interviewerPrompt',
  input: {schema: InterviewInputSchema},
  output: {schema: InterviewOutputSchema.omit({ id: true })},
  prompt: `You are the "Focus Links Interviewer AI". Your task is to act as an expert profile builder for a professional eye care directory.

You will receive free-form text from a user. Your job is to analyze this text and extract all relevant information to create a complete, structured, and professional profile.

**Instructions:**

1.  **Parse Thoroughly**: Read the entire user input carefully. Identify the user's name, role/type, location, skills, interests, work history, education, languages, and contact information (email, LinkedIn/website).
2.  **Determine Profile Type**: Classify the user into one of the following categories: 'Student', 'Optometrist', 'Ophthalmologist', 'Optician', 'Academic', 'Researcher', 'Association', 'College', 'Hospital', 'Optical', 'Industry'.
3.  **Create a Headline**: Synthesize a concise, impactful headline (the 'experience' field) that summarizes their current status or main value proposition.
4.  **Generate a Bio**: Do not just copy and paste from the input. Write a new, engaging, first-person bio (3-4 sentences) that highlights their key strengths, experiences, and goals based on the provided text.
5.  **Structure Data**: Populate all fields of the output schema accurately.
    *   For \`workExperience\` and \`education\`, create structured objects for each entry mentioned.
    *   For \`skills\` and \`interests\`, extract them into separate array elements.
    *   For \`links\`, extract the email and a LinkedIn or personal website URL.
6.  **Defaults**:
    *   Use the default placeholder for \`avatarUrl\`.
    *   Set \`verified\` to \`false\`.
    *   DO NOT generate an \`id\`.

**User Input:**
\`\`\`
{{{text}}}
\`\`\`

Now, create the structured JSON output based on your analysis.`,
});

const interviewerFlow = ai.defineFlow(
  {
    name: 'interviewerFlow',
    inputSchema: InterviewInputSchema,
    outputSchema: InterviewOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return {
        ...output!,
        id: String(Date.now()),
    };
  }
);
