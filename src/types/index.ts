
import { z } from 'zod';

export type WorkExperience = {
  title: string;
  company: string;
  startDate: string;
  endDate: string;
  description: string;
  duration?: string;
};

export type Education = {
  school: string;
  degree: string;
  fieldOfStudy: string;
  startYear: string;
  endYear: string;
  university?: string;
};

export type UserProfile = {
  id: string;
  name: string;
  type: 'Optometrist' | 'Student' | 'Academic' | 'Researcher' | 'Association' | 'College' | 'Hospital' | 'Optical' | 'Industry' | 'Ophthalmologist' | 'Optician';
  experience: string;
  location: string;
  skills: string[];
  interests: string[];
  bio: string;
  links: {
    email?: string;
    linkedin?: string;
  };
  avatarUrl: string;
  workExperience: WorkExperience[];
  education: Education[];
  languages: string[];
  verified?: boolean;
};


// Schemas and types from interviewer.ts
export const WorkExperienceSchema = z.object({
  title: z.string().describe('The job title.'),
  company: z.string().describe('The name of the company.'),
  startDate: z.string().describe('The start date of the employment.'),
  endDate: z.string().describe('The end date of the employment (or "Present").'),
  description: z.string().describe('A brief description of the role and responsibilities.'),
});

export const EducationSchema = z.object({
  school: z.string().describe('The name of the school or university.'),
  degree: z.string().describe('The degree obtained (e.g., Doctor of Optometry).'),
  fieldOfStudy: z.string().describe('The field of study (e.g., Optometry).'),
  startYear: z.string().describe('The start year of the education.'),
  endYear: z.string().describe('The end year of the education.'),
});

export const LinksSchema = z.object({
    email: z.string().email({ message: "Invalid email address" }).optional(),
    linkedin: z.string().url({ message: "Invalid URL" }).optional(),
});


export const UserProfileSchema = z.object({
    id: z.string().describe("A unique ID for the user, can be a timestamp."),
    name: z.string().describe('The full name of the person or organization.'),
    type: z.enum(['Student', 'Optometrist', 'Ophthalmologist', 'Optician', 'Academic', 'Researcher', 'Association', 'College', 'Hospital', 'Optical', 'Industry']).describe('The professional role or type of organization.'),
    experience: z.string().describe('A concise headline or tagline summarizing their experience (e.g., "5+ years in pediatric optometry" or "Leading eye care association").'),
    location: z.string().describe('The city, state, and/or country of the user.'),
    skills: z.array(z.string()).describe('A list of key professional skills, focus areas, or services offered.'),
    interests: z.array(z.string()).describe('A list of professional interests, specialities, or keywords.'),
    bio: z.string().describe('A professionally written bio, 3-4 sentences long, in the first person for individuals. This should be generated by the AI based on the input text, not just copied.'),
    links: LinksSchema.describe("The user's contact links."),
    avatarUrl: z.string().url().default('https://i.ibb.co/jG6L8p3/default-avatar.png').describe("A placeholder avatar URL. Always use 'https://i.ibb.co/jG6L8p3/default-avatar.png' as the default."),
    workExperience: z.array(WorkExperienceSchema).optional().describe('A list of the user\'s previous work experiences.'),
    education: z.array(EducationSchema).optional().describe('A list of the user\'s educational background.'),
    languages: z.array(z.string()).optional().describe('A list of languages the user speaks.'),
    verified: z.boolean().default(false).describe("Set to false by default."),
});


export const InterviewInputSchema = z.object({
  text: z.string().describe("The user's free-form text describing themselves and their professional background."),
});
export type InterviewInput = z.infer<typeof InterviewInputSchema>;

export const InterviewOutputSchema = UserProfileSchema;
export type InterviewOutput = z.infer<typeof InterviewOutputSchema>;


// Schemas and types from interviewer-chat.ts
export const MessageSchema = z.object({
  role: z.enum(['user', 'model']),
  content: z.string(),
  suggestions: z.array(z.string()).optional().describe("A list of suggested replies for the user to click."),
});
export type Message = z.infer<typeof MessageSchema>;

export const InterviewerChatInputSchema = z.array(MessageSchema);
export type InterviewerChatInput = z.infer<typeof InterviewerChatInputSchema>;

export const InterviewerChatOutputSchema = z.object({
    reply: z.string().optional().describe("The AI's next question or comment to the user. This is used for continuing the conversation."),
    suggestions: z.array(z.string()).optional().describe("A list of suggested replies for the user to click to speed up the conversation."),
    completenessScore: z.number().min(0).max(10).describe("A score from 0-10 representing the completeness of the user's profile based on the conversation."),
    profile: UserProfileSchema.partial().optional().describe("The user profile object containing the data extracted from the conversation so far."),
});
export type InterviewerChatOutput = z.infer<typeof InterviewerChatOutputSchema>;
